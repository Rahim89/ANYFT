package com.springmvc.Controller;



import java.util.List;

import javax.validation.Valid;

import org.springframework.stereotype.Controller;
import org.springframework.ui.Model;
import org.springframework.validation.BindingResult;
import org.springframework.web.bind.annotation.ModelAttribute;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RequestMethod;
import org.springframework.web.bind.annotation.RequestParam;
import org.springframework.web.servlet.ModelAndView;


import com.springmvc.Beans.Tour;
import com.springmvc.Beans.TourPackage;
import com.springmvc.Beans.Users;

import com.springmvc.DAO.TourPackageDAO;
import com.springmvc.DAO.UsersDAO;

import com.springmvc.DAOImpl.TourPackageDAOImpl;
import com.springmvc.DAOImpl.UsersDAOImpl;

@Controller
public class HomeController {
	
	/**
	 * show the home page
	 * @return
	 */
	@RequestMapping(value="/", method=RequestMethod.GET)
	public ModelAndView displayHomePage() {
		ModelAndView mav = new ModelAndView("home");
		
		return mav;
	}
	
	@RequestMapping("/home")
	public ModelAndView showHome() {
		ModelAndView mav = new ModelAndView("home");
		
		return mav;
	}
	
//-------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------	
	
	/**
	 * show the login form to allow the user to log in
	 * @return
	 */
	@RequestMapping(value="/login", method=RequestMethod.GET)
	public ModelAndView displayForm() {
		
	    ModelAndView mav = new ModelAndView("login");
		return mav;
		
	}
	
//-------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
	/**
	 * verification of the login credentials
	 * @param log
	 * @return the home page if the login is successful or return the error page if the credentials does not match
	 */
	@RequestMapping(value="/userverification", method=RequestMethod.POST)
	public ModelAndView validateLogin(@ModelAttribute("login") Users user) {
		
	UsersDAO userDAO = new UsersDAOImpl();
	
	Users dbuser = new Users();
	
	dbuser = userDAO.getUsersByUsername(user.getUserName());

	if(dbuser.getPassword()!=null) {

		if(dbuser.getPassword().equals(user.getPassword())) {
			
		      ModelAndView mav = new ModelAndView("home");
		
		      return mav;
		}
		
	}
	ModelAndView mav = new ModelAndView("errorPage");
	
	return mav;
		
	}
	
//-------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
	/**
	 * show the registration page to allow the user to register
	 * @return
	 */
	@RequestMapping("/registration")
	public ModelAndView showRegistration() {
		ModelAndView mav= new ModelAndView("registration");
		mav.addObject("userkey", new Users());
		
		return mav;
		
		 
	}
	
//-------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------	
	
	/**
	 * 
	 * @param user
	 * @param confirmPassword is to verify if the passwords match
	 * @param errors
	 * @param model
	 * @return
	 */
	
	@RequestMapping(value="/User_info", method=RequestMethod.POST)
	public ModelAndView submitRegistration( @ModelAttribute("userkey") Users user, @RequestParam("confirmPassword") String confirmPassword) {
		
		
		
//		if(errors.hasErrors()) {
//			ModelAndView mav = new ModelAndView("registration");
//			return mav;
//			
//		}
		
		UsersDAO userDAO = new UsersDAOImpl();
		
		Users foundUser = userDAO.getUsersByUsername(user.getUserName());
		
		
		// check if the username exists or not 
		
		if(foundUser.getUserName() !=null && foundUser.getUserName().equals(user.getUserName())) {
			
				
				
				ModelAndView mav = new ModelAndView("registration");
				mav.addObject("usernNameMessage", "Username already exists");
				return mav;
				
			
		}
			//check if the passwords match
			
			if(user.getPassword() != confirmPassword ) {
				ModelAndView mav = new ModelAndView("registration");
				mav.addObject("confirmPwd", "The passwords do not match!");
				return mav;
				
				}
			
		
		// add the new user in the table
		System.out.println(userDAO.addUser(user));
		
		ModelAndView mav = new ModelAndView("login");
		return mav;
		
	//
//		
	//	if(errors.hasErrors()) {
//			ModelAndView mav = new ModelAndView("home");
//			return mav;
			//return "redirect:/registration";
				
		}
//		
//		
//		UsersDAO userDAO = new UsersDAOImpl();
//		
//		List<Users> userlist = userDAO.getAllUsers();
//		
//		for(Users userx : userlist) {
//			
//			//check if the username exists in the database before adding the user
//			if(user.getUserName().equals(userx.getUserName())) {
//				
//				model.addAttribute("usernNameMessage", "Username already exists");
//				
//				return "registration";
//			}
//			
//			//check if the email exists in the database before adding the user
//			if(user.getEmail().equals(userx.getEmail())) {
//				
//				model.addAttribute("emailMessage", "Email already exists");
//				
//				return "registration";
//			}	
//			
//		}
//		
//		if(user.getPassword().length() <= 6){
//            model.addAttribute("pwMsg","Minimum 6 characters password required.");
//            return "registration";
//        }
//		
//		if(user.getPassword() != confirmPassword) {
//			model.addAttribute("confirmPwd", "The passwords do not match!");
//			
//			return "registration";
//		}
//		
//		
//		userDAO.addUser(user);
//		
//		
//		return "login";
//		
//	}
	
	
	

	
	

//	@RequestMapping(value="/registrationverification1", method=RequestMethod.POST)
//	public ModelAndView registration_Verification1(@RequestParam("username") String username,@RequestParam("password") String password, @RequestParam("confirmPassword") String confirmPassword, @RequestParam("email") String email, @RequestParam("address") String address, BindingResult errors, Model model) {
//		
//		ModelAndView mav= null;
//		
//		
//		
//		
//		
//		if(errors.hasErrors()) {
//			mav = new ModelAndView("registration");
//			//mav.addObject("userkey", new Users());
//			
//			return mav;
//		}
//	UsersDAO userDAO = new UsersDAOImpl();
//		
//		List<Users> userlist = userDAO.getAllUsers();
//		
//		for(Users userx : userlist) {
//			
//			//check if the username exists in the database before adding the user
//			if(user.getUserName().equals(userx.getUserName())) {
//				
//				//model.addAttribute("usernNameMessage", "Username already exists");
//				
//				mav = new ModelAndView("registration");
//				mav.addObject("usernNameMessage", "Username already exists");
//				return mav;
//			//	return "registration";
//			}
//			
//			//check if the email exists in the database before adding the user
//			if(user.getEmail().equals(userx.getEmail())) {
//				
//				//model.addAttribute("emailMessage", "Email already exists");
//				mav = new ModelAndView("registration");
//				mav.addObject("emailMessage", "Email already exists");
//				return mav;
//			}	
//			
//		}
//		
//		if(user.getPassword().length() <= 6){
//           // model.addAttribute("pwMsg","Minimum 6 characters password required.");
//            
//            mav = new ModelAndView("registration");
//			mav.addObject("pwMsg", "Minimum 6 characters password required.");
//			return mav;
//        }
//		
//		if(user.getPassword() != confirmPassword) {
//			//model.addAttribute("confirmPwd", "The passwords do not match!");
//			mav = new ModelAndView("registration");
//			mav.addObject("confirmPwd", "The passwords do not match!");
//			return mav;
//		}
//		
//		
//		userDAO.addUser(user);
//		mav = new ModelAndView("login");
//		
//	//	return "login";
//		
//		
//		return mav;
//		
//	}
//	
//-------------------------------------------------------------------------------------------------------	
	/**
	 * Display the tour package 
	 * @return
	 */
	@RequestMapping("/tourpackage")
	public ModelAndView displayTours() {
		ModelAndView mav = new ModelAndView("tourpackage");
		TourPackageDAO packageDAO = new TourPackageDAOImpl();
		List<TourPackage> packagelist = packageDAO.getAllTourPackage();
		mav.addObject("packageLsit", packagelist);
		
		return mav;
	}
	
//-------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
	/**
	 * Display the booking page for the user to book
	 * @return
	 */
	@RequestMapping("/booking")
	public ModelAndView displayBooking() {
		ModelAndView mav = new ModelAndView("booking");
		
		return mav;
	}
	/**
	 * to display the list of the tour packages
	 * @return the list of the packages
	 */
	@RequestMapping(value = { "/tourpackage" }, method = RequestMethod.GET)
	public ModelAndView listTourPackage() {

		TourPackageDAO tourpackageDAO = new TourPackageDAOImpl();
		List<TourPackage> listTourPackages = tourpackageDAO.getAllTourPackage();
	    ModelAndView map = new ModelAndView("tourpackage");
	    map.addObject("packages", listTourPackages);

	    return map;
	}
	
	
//	@RequestMapping(value="/userverification", method=RequestMethod.POST)
//	public ModelAndView validateBookin(@ModelAttribute("login") Tour tour) {
//		 
//	}
}
	


